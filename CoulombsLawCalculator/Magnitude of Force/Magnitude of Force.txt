#include <iostream>
#include <string>
#include <sstream>
#include <cmath>
#include <windows.h>
void loading() {

    int  x = 0;

    do {
        std::string load = "Generating Solution";
        std::string dot = " .";
        int n = 3;

        for (int i = 0; i <= n; i++) {

            system("cls");
            std::cout << "\v\v\v\v\v\v\v\v\v\v" << "\t\t\t\t\t\t" << load;
            Sleep(1 * 1000);
            load += dot;

        }

        x += 1;

    } while (x != 2);

    system("cls");
    std::cout << "\v\v\v\v\v\v\v\v\v\v\v" << "\t\t\t\t\t\t THANK YOU FOR WAITING!" << std::endl;
    Sleep(3 * 1000);
    system("cls");

}

struct Variable
{

    std::string kString = "9e9 N.m2/c2";
    double kInt = 9e9;
    double ToMakeNegative = -1;
    std::string Option;
    std::string spaces;

} var;

class MagnitudeOfForce {

public:
    std::string SFe, Sr;
    double Fe, r, q;
    double MultiplyTheTop, Divide;
    std::string property, sign;

    void Title()
    {
        system("cls");
        std::cout << "\v\v\v";
        std::cout << "\t\t\t\t\t\tMAGNITUDE OF FORCE" << std::endl;
        std::cout << std::endl;
    }

    void Disclaimer1()
    {
        std::cout << "\t\tDISCLAIMER: \v\t\t\tIn inputing the value do not put their property i.e N(Force), m(Meter),\v\t\t c(Magnitude of Force). ";
        std::cout << "Only put the quantity and if the given have x10 raise to\v\t\t something. Change x10 to -e- and beside it's raise number." << std::endl;
        std::cout << std::endl;
        std::cout << "\t\tExample: Given 12.3x10 raise to 6 " << std::endl;
        std::cout << "\t\tTo input the value: 3e6" << std::endl;
        std::cout << std::endl;
        std::cout << "\t\t\t\tPress Enter to Continue: ";
        std::getline(std::cin, var.spaces);
    }

    void InputValue()
    {
        std::cout << "\t\t Electrostatic Force (Fe)  : ";
        std::cin >> Fe;
        std::cout << "\t\t Distance (r): ";
        std::cin >> r;
    }

    void PassTheValue()
    {
        SFe = std::to_string(Fe);
        Sr = std::to_string(r);
    }

    void Disclaimer2()
    {
        std::cout << "\t\tDISCLAIMER: Use the following symbol. " << std::endl;
        std::cout << std::endl;
        std::cout << "\t\t\tMillimeter = mm " << std::endl;
        std::cout << "\t\t\tCentimeter = cm " << std::endl;
        std::cout << "\t\t\tMeter = m " << std::endl;
        std::cout << "\t\t\tKilometer = km " << std::endl;
        std::cout << "\t\t\tMiles = mi " << std::endl;
    }

    void CheckTheDistance()
    {
        std::cout << std::endl;
        std::cout << "\t\tWhat property or symbol is your distance?" << std::endl;
        std::cout << std::endl;
        std::cout << "\t\t\tPropert: ";
        std::getline(std::cin, property);
        std::getline(std::cin, property);
    }

    void MeterConvertion()
    {

        bool flag = 0;

        do {
            if (property == "mm") {
                r /= 1000;
                sign = "mm";
                flag = 1;
            }
            else if (property == "cm") {
                r /= 100;
                sign = "cm";
                flag = 1;
            }
            else if (property == "m") {
                r *= 1;
                sign = "m";
                flag = 1;
            }
            else if (property == "km") {
                r *= 1000;
                sign = "km";
                flag = 1;
            }
            else if (property == "mi") {
                r /= 1609.344;
                sign = "mi";
                flag = 1;
            }

        } while (0);
    }

    void Solution()
    {

        r = r * r;
        MultiplyTheTop = Fe * r;
        Divide = MultiplyTheTop / var.kInt;
        q = sqrt(Divide);

        if (q < 0) {
            q *= var.ToMakeNegative;
        }

    }

    void StepSolution()
    {

        std::cout << "\tSOLUTIONS" << std::endl;
        std::cout << std::endl;
        std::cout << "\t\tGIVEN: " << std::endl;
        std::cout << "\t\t\t\tCoulombs Constant (K)     : " << var.kString << std::endl;
        std::cout << "\t\t\t\tElectrostatic Force (Fe)    : " << Fe << " N" << std::endl;
        std::cout << "\t\t\t\tMagnitude of Force (r)      : " << r << " " << sign << std::endl;

        Sleep(5 * 1000);

        std::cout << std::endl;
        std::cout << "\t\t\t\t\tMagnitude of Force (q) = " << q << " c." << std::endl;

        // make an solution for tomorrow

    }

};

int main() {

    MagnitudeOfForce MOF;

    MOF.Title();
    MOF.Disclaimer1();
    MOF.Title();
    MOF.InputValue();
    MOF.PassTheValue();
    MOF.Title();
    MOF.Disclaimer2();
    MOF.CheckTheDistance();
    MOF.MeterConvertion();
    loading();
    MOF.Solution();
    MOF.StepSolution();

    return 0;
}
